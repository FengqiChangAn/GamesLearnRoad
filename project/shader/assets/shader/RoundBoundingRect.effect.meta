{
  "ver": "1.0.27",
  "uuid": "2df5bac4-e267-47c0-a667-947a5ac561d6",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\n  attribute vec2 a_uv0;\n  varying vec2 v_uv0;\n#endif\nvoid main() {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n    pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n    pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n    v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\nuniform vec2 u_custom_radius;\nuniform float u_radius;\nuniform int is_custom_radius;\nuniform vec2 u_size;\n#if USE_TEXTURE\n  varying vec2 v_uv0;\n  uniform sampler2D texture;\n#endif\nvoid main() {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n    o *= texture2D(texture, v_uv0);\n    #if CC_USE_ALPHA_ATLAS_TEXTURE\n      o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n    #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  vec2 center = u_size * vec2(0.5, 0.5);\n  vec2 pos = v_uv0 * u_size;\n  vec2 pos2center = vec2(pos.x - center.x, pos.y - center.y);\n  float halfWidth = u_size.x * 0.5;\n  float halfHeight = u_size.y * 0.5;\n  float a = 1.0;\n  if (is_custom_radius == 0) {\n    if ((abs(pos2center.x) + u_radius) >= halfWidth &&(abs(pos2center.y) + u_radius) >= halfHeight) {\n      vec2 posCircleCenter = vec2(pos2center.x < 0.0 ? (u_radius - halfWidth) : (halfWidth - u_radius), pos2center.y > 0.0 ? (halfHeight - u_radius) : (u_radius - halfHeight));\n      float dis = length(vec2(pos2center.x - posCircleCenter.x, pos2center.y - posCircleCenter.y));\n      if (dis >= u_radius) {\n        a = 1.0 - smoothstep(0.0, 0.5, dis - u_radius);\n      }\n    }\n  }\n  else {\n    if (pos.x - halfWidth < 0.0 && pos.x < u_custom_radius.x && pos.y < u_custom_radius.x) {\n      float dis = length(vec2(pos.x - u_custom_radius.x, pos.y - u_custom_radius.x));\n      if (dis > u_custom_radius.x) {\n        a = 1.0 - smoothstep(0.0, 0.5, dis - u_custom_radius.x);\n      }\n    }\n    else if (pos.x - halfWidth < 0.0 && pos.x < u_custom_radius.x && pos.y > u_size.y - u_custom_radius.x) {\n      float dis = length(vec2(pos.x - u_custom_radius.x, pos.y - u_size.y + u_custom_radius.x));\n      if (dis > u_custom_radius.x) {\n        a = 1.0 - smoothstep(0.0, 0.5, dis - u_custom_radius.x);\n      }\n    }\n    else if (pos.x - halfWidth > 0.0 && pos.x > u_size.x - u_custom_radius.y && pos.y > u_size.y - u_custom_radius.y) {\n      float dis = length(vec2(pos.x - u_size.x + u_custom_radius.y, pos.y - u_size.y + u_custom_radius.y));\n      if (dis > u_custom_radius.y) {\n        a = 1.0 - smoothstep(0.0, 0.5, dis - u_custom_radius.y);\n      }\n    }\n    else if (pos.x - halfWidth > 0.0 && pos.x > u_size.x - u_custom_radius.y && pos.y < u_custom_radius.y) {\n      float dis = length(vec2(pos.x - u_size.x + u_custom_radius.y, pos.y - u_custom_radius.y));\n      if (dis > u_custom_radius.y) {\n        a = 1.0 - smoothstep(0.0, 0.5, dis - u_custom_radius.y);\n      }\n    }\n  }\n  gl_FragColor = vec4(o.rgb, o.a * a);\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\n  in vec2 a_uv0;\n  out vec2 v_uv0;\n#endif\nvoid main() {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n    pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n    pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n    v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 v_color;\nuniform Props {\n  vec2 u_custom_radius;\n  float u_radius;\n  int is_custom_radius;\n};\nuniform Constant {\n  vec2 u_size;\n};\n#if USE_TEXTURE\n  in vec2 v_uv0;\n  uniform sampler2D texture;\n#endif\nvoid main() {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n    o *= texture(texture, v_uv0);\n    #if CC_USE_ALPHA_ATLAS_TEXTURE\n      o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n    #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  vec2 center = u_size * vec2(0.5, 0.5);\n  vec2 pos = v_uv0 * u_size;\n  vec2 pos2center = vec2(pos.x - center.x, pos.y - center.y);\n  float halfWidth = u_size.x * 0.5;\n  float halfHeight = u_size.y * 0.5;\n  float a = 1.0;\n  if (is_custom_radius == 0) {\n    if ((abs(pos2center.x) + u_radius) >= halfWidth &&(abs(pos2center.y) + u_radius) >= halfHeight) {\n      vec2 posCircleCenter = vec2(pos2center.x < 0.0 ? (u_radius - halfWidth) : (halfWidth - u_radius), pos2center.y > 0.0 ? (halfHeight - u_radius) : (u_radius - halfHeight));\n      float dis = length(vec2(pos2center.x - posCircleCenter.x, pos2center.y - posCircleCenter.y));\n      if (dis >= u_radius) {\n        a = 1.0 - smoothstep(0.0, 0.5, dis - u_radius);\n      }\n    }\n  }\n  else {\n    if (pos.x - halfWidth < 0.0 && pos.x < u_custom_radius.x && pos.y < u_custom_radius.x) {\n      float dis = length(vec2(pos.x - u_custom_radius.x, pos.y - u_custom_radius.x));\n      if (dis > u_custom_radius.x) {\n        a = 1.0 - smoothstep(0.0, 0.5, dis - u_custom_radius.x);\n      }\n    }\n    else if (pos.x - halfWidth < 0.0 && pos.x < u_custom_radius.x && pos.y > u_size.y - u_custom_radius.x) {\n      float dis = length(vec2(pos.x - u_custom_radius.x, pos.y - u_size.y + u_custom_radius.x));\n      if (dis > u_custom_radius.x) {\n        a = 1.0 - smoothstep(0.0, 0.5, dis - u_custom_radius.x);\n      }\n    }\n    else if (pos.x - halfWidth > 0.0 && pos.x > u_size.x - u_custom_radius.y && pos.y > u_size.y - u_custom_radius.y) {\n      float dis = length(vec2(pos.x - u_size.x + u_custom_radius.y, pos.y - u_size.y + u_custom_radius.y));\n      if (dis > u_custom_radius.y) {\n        a = 1.0 - smoothstep(0.0, 0.5, dis - u_custom_radius.y);\n      }\n    }\n    else if (pos.x - halfWidth > 0.0 && pos.x > u_size.x - u_custom_radius.y && pos.y < u_custom_radius.y) {\n      float dis = length(vec2(pos.x - u_size.x + u_custom_radius.y, pos.y - u_custom_radius.y));\n      if (dis > u_custom_radius.y) {\n        a = 1.0 - smoothstep(0.0, 0.5, dis - u_custom_radius.y);\n      }\n    }\n  }\n  gl_FragColor = vec4(o.rgb, o.a * a);\n}"
      }
    }
  ],
  "subMetas": {}
}