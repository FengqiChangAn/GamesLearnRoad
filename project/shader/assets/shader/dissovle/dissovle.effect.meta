{
  "ver": "1.0.27",
  "uuid": "d7dd34c4-817e-4938-bbce-2cef730469ad",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\nvarying vec4 v_color;\nvarying vec2 v_uv0;\nuniform sampler2D texture;\nuniform sampler2D dissolveMap;\nuniform float dissolveThreshold;\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  o *= v_color;\n  vec4 dissolveColor = texture2D(dissolveMap, v_uv0);\n  if(dissolveColor.r < dissolveThreshold){\n    discard;\n  }else if(dissolveColor.r > dissolveThreshold && dissolveColor.r < dissolveThreshold + 0.05){\n    o.a = 0.5;\n  }else if(dissolveColor.r > dissolveThreshold + 0.05 && dissolveColor.r < dissolveThreshold + 0.1){\n    o.a = 0.75;\n  }\n  gl_FragColor = o.rgba;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nin vec2 a_uv0;\nout vec2 v_uv0;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  pos = cc_matViewProj * pos;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\nin vec4 v_color;\nin vec2 v_uv0;\nuniform sampler2D texture;\nuniform sampler2D dissolveMap;\nuniform DissolveUniforms{\n  float dissolveThreshold;\n};\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  o *= v_color;\n  vec4 dissolveColor = texture(dissolveMap, v_uv0);\n  if(dissolveColor.r < dissolveThreshold){\n    discard;\n  }else if(dissolveColor.r > dissolveThreshold && dissolveColor.r < dissolveThreshold + 0.05){\n    o.a = 0.5;\n  }else if(dissolveColor.r > dissolveThreshold + 0.05 && dissolveColor.r < dissolveThreshold + 0.1){\n    o.a = 0.75;\n  }\n  gl_FragColor = o.rgba;\n}"
      }
    }
  ],
  "subMetas": {}
}