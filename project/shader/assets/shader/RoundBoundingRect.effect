// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.

CCEffect %{
techniques:
  - passes:
      - vert: vs
        frag: fs
        blendState:
          targets:
            - blend: true
        rasterizerState:
          cullMode: none
        properties:
          texture: { value: white }
          alphaThreshold: { value: 0.5 }

}%


CCProgram vs %{
precision highp float;

#include <cc-global>
#include <cc-local>

in vec3 a_position;
in vec4 a_color;
out vec4 v_color;

#if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
#endif

void main() {
  vec4 pos = vec4(a_position, 1);
  
  #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
  #else
    pos = cc_matViewProj * pos;
  #endif
  
  #if USE_TEXTURE
    v_uv0 = a_uv0;
  #endif
  
  v_color = a_color;
  
  gl_Position = pos;
}
}%


CCProgram fs %{
precision highp float;

#include <alpha-test>

in vec4 v_color;

uniform Props {
  //自定义圆角半径，x为左边圆角半径，y为右边圆角半径，
  vec2 u_custom_radius;  // 需要对齐到 8 字节边界，放在最前面
  //默认圆角半径，
  float u_radius;        // 4 字节，放在后面
  //是否使用自定义圆角半径，
  int is_custom_radius;  // 4 字节，放在最后
};

uniform Constant {
  vec2 u_size;           // 矩形大小
};

#if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
#endif

void main() {
  vec4 o = vec4(1, 1, 1, 1);
  
  #if USE_TEXTURE
    o *= texture(texture, v_uv0);
    #if CC_USE_ALPHA_ATLAS_TEXTURE
      o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;
    #endif
  #endif
  
  o *= v_color;
  
  ALPHA_TEST(o);
  
  vec2 center = u_size * vec2(0.5, 0.5);
  vec2 pos = v_uv0 * u_size;
  vec2 pos2center = vec2(pos.x - center.x, pos.y - center.y);
  float halfWidth = u_size.x * 0.5;
  float halfHeight = u_size.y * 0.5;
  float a = 1.0;
  // 使用默认圆角半径
  if (is_custom_radius == 0) {
    if ((abs(pos2center.x) + u_radius) >= halfWidth &&(abs(pos2center.y) + u_radius) >= halfHeight) {
      vec2 posCircleCenter = vec2(pos2center.x < 0.0 ? (u_radius - halfWidth) : (halfWidth - u_radius), pos2center.y > 0.0 ? (halfHeight - u_radius) : (u_radius - halfHeight));
      float dis = length(vec2(pos2center.x - posCircleCenter.x, pos2center.y - posCircleCenter.y));
      if (dis >= u_radius) {
        a = 1.0 - smoothstep(0.0, 0.5, dis - u_radius);
      }
    }
  } 
  // 使用自定义圆角半径
  else {
    // 当前像素在左上圆角内
    if (pos.x - halfWidth < 0.0 && pos.x < u_custom_radius.x && pos.y < u_custom_radius.x) {
      float dis = length(vec2(pos.x - u_custom_radius.x, pos.y - u_custom_radius.x));
      if (dis > u_custom_radius.x) {
        a = 1.0 - smoothstep(0.0, 0.5, dis - u_custom_radius.x);
      }
    }
    // 当前像素在左下圆角内
    else if (pos.x - halfWidth < 0.0 && pos.x < u_custom_radius.x && pos.y > u_size.y - u_custom_radius.x) {
      // 点到圆心的距离
      float dis = length(vec2(pos.x - u_custom_radius.x, pos.y - u_size.y + u_custom_radius.x));
      if (dis > u_custom_radius.x) {
        a = 1.0 - smoothstep(0.0, 0.5, dis - u_custom_radius.x);
      }
    }
    // 当前像素在右上圆角内
    else if (pos.x - halfWidth > 0.0 && pos.x > u_size.x - u_custom_radius.y && pos.y > u_size.y - u_custom_radius.y) {
      // 点到圆心的距离
      float dis = length(vec2(pos.x - u_size.x + u_custom_radius.y, pos.y - u_size.y + u_custom_radius.y));
      if (dis > u_custom_radius.y) {
        a = 1.0 - smoothstep(0.0, 0.5, dis - u_custom_radius.y);
      }
    }
    // 当前像素在右下圆角内
    else if (pos.x - halfWidth > 0.0 && pos.x > u_size.x - u_custom_radius.y && pos.y < u_custom_radius.y) {
      // 点到圆心的距离
      float dis = length(vec2(pos.x - u_size.x + u_custom_radius.y, pos.y - u_custom_radius.y));
      if (dis > u_custom_radius.y) {
        a = 1.0 - smoothstep(0.0, 0.5, dis - u_custom_radius.y);
      }
    } 
  }
  gl_FragColor = vec4(o.rgb, o.a * a);
}
}%
